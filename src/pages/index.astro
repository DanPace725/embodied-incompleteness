---
import { Client } from "@notionhq/client";
import Layout from "../layouts/Layout.astro";
export const prerender = false;

const notion = new Client({ auth: import.meta.env.NOTION_TOKEN });
const databaseId = "1e811588332080a98a3ac31045f362e1";

let notionData;
try {
  notionData = await notion.databases.query({ database_id: databaseId });
} catch (error) {
  console.error("Notion fetch error:", error);
  notionData = { results: [] };
}

function getTitle(page) {
  const titleProp = page.properties.Name;
  if (!titleProp || !titleProp.title || !titleProp.title[0]) return "Untitled";
  return titleProp.title[0].plain_text;
}

function getStatus(page) {
  const statusProp = page.properties.Status;
  if (!statusProp || !statusProp.select || !statusProp.select.name) return null;
  return statusProp.select.name;
}

function getCategory(page) {
  const categoryProp = page.properties.Category;
  if (!categoryProp || !categoryProp.select || !categoryProp.select.name) return null;
  return categoryProp.select.name;
}

function getInterest(page) {
  const interestProp = page.properties.Interest;
  if (!interestProp || interestProp.type !== 'number') return 0;
  return interestProp.number || 0;
}

// Group and sort projects
const groupedProjects = {};
notionData.results.forEach(project => {
  const category = getCategory(project) || "Uncategorized";
  if (!groupedProjects[category]) {
    groupedProjects[category] = [];
  }
  groupedProjects[category].push(project);
});

// Get unique status values for legend
const statusList = [...new Set(
  notionData.results
    .map(page => getStatus(page))
    .filter(Boolean)
)];

// Color map for statuses
const statusColors = {
  "Actively Exploring": "bg-green-500",
  "Peacefully Resting": "bg-blue-500",
  "Harvested for Parts": "bg-purple-500",
  "Hibernating": "bg-yellow-500",
  "Waiting for Technology": "bg-indigo-500",
  "Complete Enough": "bg-teal-500",
  "Actually Completed": "bg-pink-500",
  "Default": "bg-gray-500"
};

const statusNameMap = {
  "Actively Exploring": "Sprouting",
  "Peacefully Resting": "Fallow",
  "Harvested for Parts": "Composting",
  "Hibernating": "Dormant",
  "Waiting for Technology": "Needs More Sun",
  "Complete Enough": "Evergreen",
  "Actually Completed": "Mature",
};

// Get color for a status
function getStatusColor(status) {
  return statusColors[status] || statusColors["Default"];
}

// Get themed status name
function getStatusName(status) {
  return statusNameMap[status] || status;
}
---

<Layout>
  <div class="px-8 py-12">
    <header class="mb-16 text-center">
      <h1 class="text-5xl font-bold mb-4 text-white">
        A Digital Garden of Ideas
      </h1>
      <p class="text-xl text-gray-400 max-w-2xl mx-auto">
        A collection of projects, notes, and ideas, all in various stages of growth.
      </p>
      
      <!-- Navigation -->
      <nav class="mt-10 flex justify-center">
        <a href="/about" class="px-5 py-3 bg-gray-800 hover:bg-gray-700 text-white rounded-lg transition-colors">
          About the Garden
        </a>
      </nav>

      <!-- NEW: Add this toggle section -->
      <div class="mt-8 flex justify-center">
        <div class="inline-flex rounded-lg bg-gray-800 p-1">
          <button
            id="grid-toggle"
            class="px-4 py-2 text-sm font-medium text-white bg-gray-600 rounded-md transition-colors"
          >
            Grid View
          </button>
          <button
            id="focus-toggle"
            class="px-4 py-2 text-sm font-medium text-gray-400 hover:text-white transition-colors"
          >
            Focus View
          </button>
        </div>
      </div>
      
      <!-- Status Legend -->
      <div class="mt-12 flex flex-wrap justify-center gap-4">
        {statusList.map(status => (
          <div class="flex items-center">
            <span class={`w-3 h-3 rounded-full ${getStatusColor(status)} mr-2`}></span>
            <span class="text-gray-300 text-sm">{getStatusName(status)}</span>
          </div>
        ))}
      </div>
    </header>

    <main id="grid-view">
      {Object.keys(groupedProjects).length === 0 ? (
        <div class="text-center text-gray-500 py-10">
          No projects found. Please add some projects to your Notion database.
        </div>
      ) : (
        Object.entries(groupedProjects).map(([category, projects]) => (
          <div class="mb-12">
            <h2 class="text-2xl font-bold mb-6 text-white border-b border-gray-800 pb-2">{category}</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              {projects.map(project => {
                const title = getTitle(project);
                const status = getStatus(project);
                const interest = getInterest(project);
                return (
                  <a 
                    href={`/projects/${project.id}`}
                    class="block p-5 bg-gray-800 hover:bg-gray-700 rounded-lg transition-all duration-200 border border-gray-700 hover:border-gray-600"
                  >
                    <div class="flex justify-between items-start">
                      <h3 class="text-xl font-medium text-white">{title}</h3>
                      <div class="flex items-center gap-2">
                        {interest > 0 && (
                          <span class="text-xs inline-flex items-center font-bold leading-sm uppercase px-3 py-1 bg-gray-600 text-white rounded-full">
                            ðŸ‘€ {interest}
                          </span>
                        )}
                        {status && (
                          <span class={`text-xs px-2 py-1 rounded-full ${getStatusColor(status)} bg-opacity-30 text-white`}>
                            {getStatusName(status)}
                          </span>
                        )}
                      </div>
                    </div>
                    <p class="mt-2 text-gray-400 text-sm line-clamp-2">
                      {project.properties.Description?.rich_text?.[0]?.plain_text || "No description available."}
                    </p>
                  </a>
                );
              })}
            </div>
          </div>
        ))
      )}
    </main>

    <!-- NEW: Focus mode section -->
    <main id="focus-view" class="hidden focus-mode-container">
      {notionData.results.map(project => {
        const title = getTitle(project);
        const status = getStatus(project);
        const interest = getInterest(project);
        return (
          <div class="focus-mode-project">
            <div class="text-center">
              <h2 class="text-4xl font-bold text-white mb-4">{title}</h2>
              {status && (
                <span class={`inline-block text-sm px-3 py-1 rounded-full ${getStatusColor(status)} bg-opacity-30 text-white mb-4`}>
                  {getStatusName(status)}
                </span>
              )}
              <p class="text-xl text-gray-300 mb-8 max-w-2xl mx-auto">
                {project.properties.Description?.rich_text?.[0]?.plain_text || "No description available."}
              </p>
              {interest > 0 && (
                <div class="text-gray-400 mb-6">
                  ðŸ‘€ {interest} {interest === 1 ? 'person has' : 'people have'} noticed this
                </div>
              )}
              <a
                href={`/projects/${project.id}`}
                class="inline-block px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
              >
                Explore This Idea â†’
              </a>
            </div>
          </div>
        );
      })}
    </main>
  </div>
</Layout>
<script>
  const gridToggle = document.getElementById('grid-toggle');
  const focusToggle = document.getElementById('focus-toggle');
  const gridView = document.getElementById('grid-view');
  const focusView = document.getElementById('focus-view');

  gridToggle?.addEventListener('click', () => {
    // Update button styles
    gridToggle.classList.add('bg-gray-600', 'text-white');
    gridToggle.classList.remove('text-gray-400');
    focusToggle.classList.remove('bg-gray-600', 'text-white');
    focusToggle.classList.add('text-gray-400');

    // Show grid, hide focus
    gridView?.classList.remove('hidden');
    focusView?.classList.add('hidden');
  });

  focusToggle?.addEventListener('click', () => {
    // Update button styles
    focusToggle.classList.add('bg-gray-600', 'text-white');
    focusToggle.classList.remove('text-gray-400');
    gridToggle.classList.remove('bg-gray-600', 'text-white');
    gridToggle.classList.add('text-gray-400');

    // Show focus, hide grid
    focusView?.classList.remove('hidden');
    gridView?.classList.add('hidden');
  });
</script>