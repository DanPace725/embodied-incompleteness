---
import { Client } from "@notionhq/client";
import Layout from "../../layouts/Layout.astro";
import InterestButton from "../../components/InterestButton.tsx";
import TipButton from "../../components/TipButton.tsx";

export const prerender = false;

// Get the project ID from the URL
const { slug } = Astro.params;

// Initialize Notion client
const notion = new Client({ auth: import.meta.env.NOTION_TOKEN });

// Fetch the page data
let page;
let blocks = [];

try {
  // Get the page
  page = await notion.pages.retrieve({ page_id: slug });
  
  // Get the blocks (content)
  const blockResponse = await notion.blocks.children.list({
    block_id: slug,
  });
  blocks = blockResponse.results;
} catch (error) {
  console.error("Notion fetch error:", error);
  return Astro.redirect('/'); // Redirect to home page if there's an error
}

function getTitle(page) {
  const titleProp = page.properties.Name;
  if (!titleProp || !titleProp.title || !titleProp.title[0]) return "Untitled";
  return titleProp.title[0].plain_text;
}

function getDescription(page) {
  const descProp = page.properties.Description;
  if (!descProp || !descProp.rich_text || !descProp.rich_text[0]) return "";
  return descProp.rich_text[0].plain_text;
}

function getInterest(page) {
  const interestProp = page.properties.Interest;
  if (!interestProp || interestProp.type !== 'number') return 0;
  return interestProp.number || 0;
}

function formatDate(dateString) {
  return new Date(dateString).toLocaleDateString(undefined, {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
}

const statusNameMap = {
  "Actively Exploring": "Sprouting",
  "Peacefully Resting": "Fallow",
  "Harvested for Parts": "Composting",
  "Hibernating": "Dormant",
  "Waiting for Technology": "Needs More Sun",
  "Complete Enough": "Evergreen",
  "Actually Completed": "Mature",
};

function getStatusName(status) {
  return statusNameMap[status] || status;
}

// Helper to render different block types
function renderBlock(block) {
  switch (block.type) {
    case 'paragraph':
      return block.paragraph.rich_text.map(text => text.plain_text).join('');
    case 'heading_1':
      return block.heading_1.rich_text.map(text => text.plain_text).join('');
    case 'heading_2':
      return block.heading_2.rich_text.map(text => text.plain_text).join('');
    case 'heading_3':
      return block.heading_3.rich_text.map(text => text.plain_text).join('');
    default:
      return null;
  }
}

const initialInterest = getInterest(page);
---

<Layout>
  <div class="mx-auto max-w-4xl px-4 sm:px-6 py-12">
    {/* Back button */}
    <a 
      href="/" 
      class="inline-flex items-center text-blue-400 hover:text-blue-300 mb-8 transition-colors"
    >
      <span class="mr-2">‚Üê</span> Back to Projects
    </a>

    {/* Project title */}
    <h1 class="text-4xl sm:text-5xl font-bold mb-4 text-white">{getTitle(page)}</h1>
    
    {/* Description/Subtitle */}
    <div class="text-lg sm:text-xl text-gray-400 mb-10">
      {getDescription(page)}
    </div>

    {/* Main content */}
    <div class="prose prose-lg prose-invert max-w-none">
      {blocks.map((block) => {
        const content = renderBlock(block);
        if (!content) return null;
        
        return (
          <div class:list={[
            'mb-4',
            {
              'text-base text-gray-300': block.type === 'paragraph',
              'text-3xl font-bold mt-10 text-white': block.type === 'heading_1',
              'text-2xl font-semibold mt-8 text-white': block.type === 'heading_2',
              'text-xl font-medium mt-6 text-white': block.type === 'heading_3',
            }
          ]}>
            {content}
          </div>
        );
      })}
    </div>

    {/* Interaction Section */}
    <div class="mt-16 flex flex-col sm:flex-row justify-center items-center gap-4">
      <InterestButton
        client:load
        projectId={slug}
        initialCount={initialInterest}
      />
      <TipButton
        client:load
        projectId={slug}
      />
    </div>

    {/* Properties display */}
    <div class="mt-16 bg-gray-900 rounded-lg p-6 border border-gray-800">
      <h2 class="text-2xl font-semibold mb-6 text-white">Project Details</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        {Object.entries(page.properties).map(([key, value]) => (
          <div class="bg-gray-800 p-5 rounded-lg border border-gray-700">
            <div class="font-medium text-gray-400 mb-2 uppercase text-sm tracking-wider">{key}</div>
            <div class="text-white">
              {/* Property types */}
              {value.type === 'rich_text' && value.rich_text[0]?.plain_text}
              {value.type === 'title' && value.title[0]?.plain_text}
              {value.type === 'select' && value.select?.name && (
                <span class="inline-block px-3 py-1 bg-blue-900 text-blue-200 rounded-full">
                  {key === 'Status' ? getStatusName(value.select.name) : value.select.name}
                </span>
              )}
              {value.type === 'number' && value.number}
              {/* Date handling */}
              {value.type === 'date' && (
                <span class="text-gray-200">
                  {value.date?.start ? formatDate(value.date.start) : 'Not set'}
                  {value.date?.end && ` - ${formatDate(value.date.end)}`}
                </span>
              )}
              {/* Multi-select handling */}
              {value.type === 'multi_select' && 
                <div class="flex flex-wrap gap-2">
                  {value.multi_select?.map(tag => (
                    <span class="bg-blue-900 text-blue-200 text-sm px-3 py-1 rounded-full">
                      {tag.name}
                    </span>
                  ))}
                </div>
              }
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</Layout>